{"version":3,"sources":["data/category.js","containers/Header/Header.js","containers/Definitions/Definitions.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["categories","value","label","Header","category","set_category","word","set_word","light_mode","dark_theme","createTheme","palette","primary","main","type","className","ThemeProvider","theme","TextField","onChange","e","target","select","lang","helperText","map","option","MenuItem","Definitions","meanings","console","log","src","phonetics","audio","controls","mean","item","definitions","def","definition","example","synonyms","s","App","useState","set_meanings","set_light_mode","DarkMode","withStyles","switchBase","color","grey","backgroundColor","checked","track","Switch","dictionary_api","a","axios","get","data","useEffect","Container","maxWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7ca376c5.chunk.js","sourcesContent":["const categories = [\n    { value: \"English\", label: \"en\" },\n    { value: \"Hindi\", label: \"hi\" },\n    { value: \"Spanish\", label: \"es\" },\n    { value: \"French\", label: \"fr\" },\n    { value: \"Japanese\", label: \"ja\" },\n    { value: \"Russian\", label: \"ru\" },\n    { value: \"German\", label: \"de\" },\n    { value: \"Italian\", label: \"it\" },\n    { value: \"Korean\", label: \"ko\" },\n    { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\n    { value: \"Arabic\", label: \"ar\" },\n    { value: \"Turkish\", label: \"tr\" },\n];\n\nexport default categories;","import { createTheme, MenuItem, TextField, ThemeProvider } from '@material-ui/core';\nimport React from 'react';\nimport './Header.css'\nimport categories from './../../data/category';\n\nconst Header = ({\n    category,\n    set_category,\n    word,\n    set_word,\n    light_mode\n}) => {\n    const dark_theme = createTheme({\n        palette: {\n            primary: {\n                main: light_mode ? '#000' : '#fff'\n            },\n            type: light_mode ? 'light' : 'dark',\n        },\n    });\n\n    const handle_change = (lang) => {\n        set_category(lang)\n        set_word('')\n    }\n\n    return (\n        <div className=\"header\">\n            <span className=\"title\">{word ? word : \"Word Head\"}</span>\n            <div className=\"inputs\">\n                <ThemeProvider theme={dark_theme}>\n\n                    {/* text field */}\n                    <TextField\n                        label=\"Search a word\"\n                        className=\"search\"\n                        value={word}\n                        onChange={(e) => set_word(e.target.value)}\n                    />\n\n                    {/* select field */}\n                    <TextField\n                        className=\"select\"\n                        select\n                        label=\"Language\"\n                        value={category}\n                        onChange={(e) => handle_change(e.target.value)}\n                        helperText=\"Please select your currency\"\n                    >\n                        {\n                            categories.map((option => (\n                                <MenuItem key={option.label} value={option.label}>{option.value}</MenuItem>\n                            )))\n                        }\n                    </TextField>\n                </ThemeProvider>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport './Definitions.css';\n\nconst Definitions = ({\n    word,\n    meanings,\n    category,\n    light_mode\n}) => {\n    // console.log('meanings[0].phonetics[0].audio', meanings[0].phonetics[0].audio);\n    console.log('meanings[0]', meanings[0]);\n    console.log('word', word);\n    console.log('category', category);\n    return (\n        <div className='meaning'>\n            {\n                meanings[0] && word && category === 'en' && (\n                    <>\n                        <audio src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio} controls>\n                            Your Browser doesn't support audio element.\n                        </audio>\n                    </>\n                )\n\n            }\n            {\n                word === ''\n                    ? (<span className=\"sub_title\">Start by typing a word in Search.</span>)\n                    : (\n                        meanings.map((mean) => (\n                            mean.meanings.map((item) => (\n                                item.definitions.map((def) => (\n                                    <div className=\"single_mean\">\n                                        <b>{def.definition}</b>\n                                        <hr />\n                                        {\n                                            def.example && (\n                                                <span>\n                                                    <b>Example : </b>\n                                                    {def.example}\n                                                </span>\n                                            )\n                                        }\n                                        {\n                                            def.synonyms && (\n                                                <span>\n                                                    <b>Synonyms : </b>\n                                                    {def.synonyms.map((s) => (\n                                                        `${s}, `\n                                                    ))}\n                                                </span>\n                                            )\n                                        }\n                                    </div>\n                                ))\n                            ))\n                        ))\n                    )\n            }\n        </div>\n    )\n}\n\nexport default Definitions\n","import React, { useEffect, useState } from 'react';\nimport { Container, withStyles, Switch } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport './App.css';\nimport axios from 'axios';\nimport Header from './containers/Header/Header';\nimport Definitions from './containers/Definitions/Definitions';\n\n\nfunction App() {\n  const [word, set_word] = useState('plane')\n  const [meanings, set_meanings] = useState([]);\n  const [category, set_category] = useState('en');\n  const [light_mode, set_light_mode] = useState(false)\n\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[300],\n      '&$checked': {\n        color: grey[500],\n      },\n      '&$checked + $track': {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n  const dictionary_api = async () => {\n    try {\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`)\n      set_meanings(data.data)\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  console.log(meanings);\n\n  useEffect(() => {\n    dictionary_api();\n  }, [word, category]) \n\n  return (\n    <div className={`section ${light_mode ? 'light_mode' : ''}`}>\n      <Container maxWidth=\"md\" className=\"container\">\n        <div className=\"switch_btn\">\n          <span>{light_mode ? \"Dark\" : \"Light\"} Mode</span>\n          <DarkMode checked={light_mode} onChange={() => set_light_mode(!light_mode)} />\n        </div>\n        <Header\n          category={category}\n          set_category={set_category}\n          word={word}\n          set_word={set_word}\n          light_mode={light_mode}\n        />\n        {\n          meanings && (\n            <Definitions\n              word={word}\n              meanings={meanings}\n              category={category}\n              light_mode={light_mode}\n            />\n          )\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log('swUrl', swUrl)\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}